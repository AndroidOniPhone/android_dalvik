#!/bin/bash
#
# Copyright (C) 2007 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Set up prog to be the path of this script, including following symlinks,
# and set up progdir to be the fully-qualified pathname of its directory.
prog="$0"
while [ -h "${prog}" ]; do
    newProg=`/bin/ls -ld "${prog}"`
    newProg=`expr "${newProg}" : ".* -> \(.*\)$"`
    if expr "x${newProg}" : 'x/' >/dev/null; then
        prog="${newProg}"
    else
        progdir=`dirname "${prog}"`
        prog="${progdir}/${newProg}"
    fi
done
oldwd=`pwd`
progdir=`dirname "${prog}"`
cd "${progdir}"
progdir=`pwd`
prog="${progdir}"/`basename "${prog}"`

# Globals for tracking numbers of successes and failures and their names.
passed=0
surprised=0
surprisedNames=""
ignored=0
ignoredNames=""
failed=0
failedNames=""

# Tests failing and require attention (e.g. 115-merge)
knownBad="100-local-mismatch 115-merge 119-merge-conflict"

function display_results {
  printf    "\n\nTest Results\n"
  printf -- "----------------------------\n"
  printf    "Pass:                   % 3d\n" $passed
  printf    "Surprise pass:          % 3d\n" $surprised
  printf    "Known failures:         % 3d\n" $ignored
  printf    "Failures:               % 3d\n" $failed
  printf -- "----------------------------\n"
  printf    "Elapsed time(s):        % 3d\n" $SECONDS

  list_files "Unexpected successes" "$surprisedNames"
  list_files "Known failures" "$ignoredNames"
  list_files "Failures" "$failedNames"

  needingAttention=$((failed + surprised))
  exit $needingAttention
}

function list_files {
  title=$1
  if [[ "$2" = "" ]]; then
    names="NONE"
  else
    names=$2
  fi

  echo
  echo "$title:"
  for i in $names; do
    echo "  $i"
  done
}

function run_tests {
  for i in *; do
    if [ -d "$i" -a -r "$i" ]; then
      if [[ "$knownBad" == *"$i"* ]]; then
          expectFail=1
      else
        expectFail=0
      fi

      output=/tmp/$$/$i
      ./run-test --output_dir "$output" "$i"
      if [ $? = 0 ]; then
        if [[ $expectFail = 0 ]]; then
            ((passed++))
        else
          echo "Failing on unexpected success of $i"
          ((surprised++))
          surprisedNames="$surprisedNames $i"
        fi
      else
        if [[ $expectFail = 0 ]]; then
          ((failed++))
          failedNames="$failedNames $i"
        else
          echo "Ignoring expected failure of $i"
          ((ignored++))
          ignoredNames="$ignoredNames $i"
          # Clean up when we expect a test to fail.
          # run-test only does this on success.
          rm -rf "$output"
        fi
      fi
    fi
  done
}

function handle_interrupt {
  trap INT
  display_results
}

trap handle_interrupt INT
run_tests
display_results
